class SpriteElement extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.image=document.createElement("img"),this.shadowRoot.appendChild(this.image),this.image.style["-webkit-user-drag"]="none"}updateImage(){const src=this.getAttribute("src"),width=this.getAttribute("width"),height=this.getAttribute("height"),index=this.getAttribute("index"),naturalWidth=this.getAttribute("naturalWidth")||this.image.naturalWidth||64,posX=this.getAttribute("pos-x")||0,posY=this.getAttribute("pos-y")||0;this.image.src=App.checkResourceOverride(src),this.image.width=width,this.image.height=height;const x=index%(naturalWidth/width)*width,y=Math.floor(index/(naturalWidth/width))*height;this.image.style.objectFit="none",this.image.style.objectPosition=`-${x+posX}px -${y+posY}px`,this.image.style.imageRendering="pixelated"}connectedCallback(){this.updateImage()}attributeChangedCallback(name,oldValue,newValue){this.updateImage()}static get observedAttributes(){return["src","width","height","index"]}}customElements.define("c-sprite",SpriteElement);class AudioChannel{audioContext=new AudioContext;audioBufferCache=new Map;currentSource=null;isBusy=!1;constructor(props={}){const{preloadList:preloadList}=props;preloadList&&preloadList.forEach(path=>this.load(path))}async load(path){const response=await fetch(path),arrayBuffer=await response.arrayBuffer(),audioBuffer=await this.audioContext.decodeAudioData(arrayBuffer);return this.audioBufferCache.set(path,audioBuffer),audioBuffer}async play(path,force){if(this.isBusy&&!force)return;const buffer=this.audioBufferCache.get(path)??await this.load(path);if(force&&this.currentSource){try{this.currentSource.stop()}catch(e){}this.currentSource.disconnect()}const source=this.audioContext.createBufferSource();source.buffer=buffer,source.connect(this.audioContext.destination),source.start(0),this.currentSource=source,this.isBusy=!0,source.onended=()=>{this.isBusy=!1,this.currentSource=null}}}function handleServiceWorker(){const isOnItch=-1!==location.host.indexOf("itch");if(!navigator?.serviceWorker||isOnItch)return;let shownControllerChangeModal=!1;navigator?.serviceWorker?.register("service-worker.js").then(registration=>{console.log("Service Worker Registered")}),navigator?.serviceWorker?.addEventListener("controllerchange",()=>{shownControllerChangeModal||isOnItch||!App.awayTime||(shownControllerChangeModal=!0,document.querySelector("#download-container").style.display="none",document.querySelector("#download-complete-container").style.display="")});new BroadcastChannel("sw-messages").addEventListener("message",event=>{switch(event.data.type){case"install":if(!App.awayTime||isOnItch)break;const downloadContainer=document.querySelector("#download-container");downloadContainer.style.display="",downloadContainer.onclick=()=>{downloadContainer.style.display="none"}}})}const showError=(msg,stack)=>{const element=document.querySelector("#loading-error");element.innerHTML=`<i class="fa-solid fa-warning"></i> ${sanitize(msg)}`,element.onclick=()=>{stack&&showError(stack,msg)}};window.onerror=message=>{showError(message),App.sendErrorLog(message)},window.onunhandledrejection=event=>{const reason=event?.reason,message="string"==typeof reason?reason:reason?.message||"Unknown rejection",stack=reason?.stack||!1;showError(event?.reason,event?.reason?.stack),stack&&App.sendErrorLog(`${message} - ${stack}`)},handleServiceWorker(),App.init();