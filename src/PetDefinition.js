class PetDefinition{spritesheet={cellNumber:0,cellSize:32,rows:4,columns:4};birthday=new Date;lastBirthday=new Date;animations={idle:{start:1,end:2,frameTime:500},idle_side:{start:9,end:10,frameTime:500},idle_uncomfortable:{start:4,end:5,frameTime:500},idle_side_uncomfortable:{start:12,end:13,frameTime:1e3},moving:{start:10,end:12,frameTime:100},talking:{start:10,end:11,frameTime:100},sitting:{start:14,end:15,frameTime:300},uncomfortable:{start:4,end:6,frameTime:500,sound:{file:"sad.ogg",interval:2}},mild_uncomfortable:{start:4,end:5,frameTime:500},angry:{start:6,end:7,frameTime:500,sound:{file:"angry.ogg",interval:2}},eating:{start:14,end:16,frameTime:250,sound:{file:"eat.ogg",interval:2}},shocked:{start:7,end:8,frameTime:250,sound:{file:"shock.ogg",interval:0}},blush:{start:8,end:9,frameTime:250,sound:{file:"blush.ogg",interval:0}},cheering:{start:2,end:4,frameTime:250,sound:{file:"cheer.ogg",interval:2}},cheering_with_icon:{start:2,end:4,frameTime:250,objects:[{img:"resources/img/misc/happy_icon.png",x:10,y:10,z:8,interval:2}]},jumping:{start:2,end:3,frameTime:250},refuse:{start:4,end:7,frameTime:300,sound:{file:"refuse.ogg",interval:2}},sleeping:{start:16,end:17,frameTime:1e3},kissing:{start:12,end:14,frameTime:250},battle:{start:1,end:3,frameTime:350+250*Math.random()}};stats={speed:.01,max_hunger:100,hunger_satisfaction:85,hunger_min_desire:40,hunger_depletion_rate:.0145,activity_hunger_depletion:.5,max_sleep:100,sleep_satisfaction:70,sleep_min_desire:20,sleep_depletion_rate:.0034,sleep_replenish_rate:.1,light_sleepiness:.01,activity_sleep_depletion:.3,max_fun:100,fun_min_desire:35,fun_satisfaction:70,fun_depletion_rate:.0235,max_bladder:100,bladder_depletion_rate:.015,max_health:100,health_depletion_mult:.5,health_depletion_rate:.0055,max_cleanliness:100,cleanliness_depletion_mult:20,cleanliness_depletion_rate:.0115,max_death_tick:100,baby_max_death_tick:44,child_max_death_tick:60,teen_max_death_tick:74,death_tick_rate:289e-6,max_care:3,wander_min:.5,wander_max:4,max_discipline:100,discipline_depletion_rate:9e-5,is_misbehaving:!1,last_time_praise_given:0,last_time_misbehave_attempted:Date.now(),current_hunger:40,current_sleep:70,current_fun:10,current_bladder:10,current_health:90,current_cleanliness:50,current_death_tick:100,current_care:1,current_discipline:random(5,20),gold:15,is_sleeping:!1,has_poop_out:!1,is_egg:!1,is_player_family:!1,is_at_parents:!1,is_dead:!1,is_at_vacation:!1,current_want:{type:null,item:null,appearTime:null,pendingFulfilled:null,next_refresh_ms:(new Date).getTime()+random(5e3,3e4)},should_care_increase:!0,used_toilet:0,is_potty_trained:!1,current_rabbit_hole:{name:!1,endTime:!1},is_revived_once:!1,is_ghost:!1,last_eaten:[],current_expression:0,current_logic:0,current_endurance:0,schoolClassesToday:0,lastSchoolClassLimitReset:Date.now(),has_received_school_invite:!1,gender:randomFromArray(App.constants.GENDERS)};friends=[];family=[];deceasedPredecessors=[];inventory={food:{bread:10,pizza:2,paster:2,lollipop:3,cupcake:3,medicine:2},item:{rattle:1},accessory:{},harvests:{},seeds:{},misc:{}};accessories=[];constructor(config){config&&Object.assign(this,config),this.prepareSprite()}getSpritesheetDefinition(){this.spritesheet&&(this.spritesheet={...this.spritesheet}),this.spritesheet=this.spritesheetDefinitions[this.lifeStage+""]}serializables=["name","stats","inventory","friends","family","sprite","birthday","lastBirthday","accessories","deceasedPredecessors","spriteSkin"];serializeStats(noStringify){let s={};return this.serializables.forEach(serializable=>{if("stats"!==serializable){switch(serializable){case"friends":return void(s.friends=this.friends.map(friendDef=>({...App.minimalizePetDef(friendDef.serializeStats(!0)),stats:{player_friendship:friendDef.stats.player_friendship,is_player_family:friendDef.stats.is_player_family,is_ghost:friendDef.stats.is_ghost}})));case"birthday":case"lastBirthday":return void(s[serializable]=new Date(this[serializable]).getTime())}s[serializable]=this[serializable]}else s.stats={gold:this.stats.gold,current_bladder:this.stats.current_bladder,current_fun:this.stats.current_fun,current_hunger:this.stats.current_hunger,current_sleep:this.stats.current_sleep,current_health:this.stats.current_health,current_cleanliness:this.stats.current_cleanliness,current_death_tick:this.stats.current_death_tick,has_poop_out:this.stats.has_poop_out,is_sleeping:this.stats.is_sleeping,is_egg:this.stats.is_egg,is_player_family:this.stats.is_player_family,player_friendship:this.stats.player_friendship,is_at_parents:this.stats.is_at_parents,is_at_vacation:this.stats.is_at_vacation,is_dead:this.stats.is_dead,current_want:this.stats.current_want,current_care:this.stats.current_care,should_care_increase:this.stats.should_care_increase,used_toilet:this.stats.used_toilet,is_potty_trained:this.stats.is_potty_trained,current_rabbit_hole:this.stats.current_rabbit_hole,is_revived_once:this.stats.is_revived_once,last_eaten:this.stats.last_eaten,schoolClassesToday:this.stats.schoolClassesToday,lastSchoolClassLimitReset:this.stats.lastSchoolClassLimitReset,has_received_school_invite:this.stats.has_received_school_invite,current_expression:this.stats.current_expression,current_logic:this.stats.current_logic,current_endurance:this.stats.current_endurance,current_discipline:this.stats.current_discipline,last_time_praise_given:this.stats.last_time_praise_given,last_time_misbehave_attempted:this.stats.last_time_misbehave_attempted,is_misbehaving:this.stats.is_misbehaving,has_received_school_invite:this.stats.has_received_school_invite,gender:this.stats.gender,is_ghost:this.stats.is_ghost}}),s}loadStats(json){return this.serializables.forEach(serializable=>{json[serializable]&&("object"==typeof json[serializable]?Object.assign(this[serializable],json[serializable]):this[serializable]=json[serializable])}),this.friends.length&&(this.friends=this.friends.map(friend=>{let def=(new PetDefinition).loadStats(friend);return def.friends=[],def})),this.prepareSprite(),this}setStats(stats){return Object.assign(this.stats,stats),this}maxStats(){this.stats.current_hunger=100,this.stats.current_fun=100,this.stats.current_sleep=100,this.stats.current_health=100,this.stats.current_bladder=100,this.stats.current_cleanliness=100,this.stats.current_death_tick=100,this.stats.has_poop_out=!1,this.stats.is_dead=!1,this.stats.is_misbehaving=!1,this.stats.current_discipline=100}loadAccessories(accessories){return accessories&&(this.accessories=accessories),this}increaseFriendship(value){value||(value=random(5,10)),this.stats.player_friendship?this.stats.player_friendship+=value:this.stats.player_friendship=value,this.stats.player_friendship=clamp(this.stats.player_friendship,1,100)}getFriendship(){return this.stats.player_friendship||this.increaseFriendship(random(2,8)),this.stats.player_friendship}getLifeStage(){return PetDefinition.getLifeStage(this.sprite)}getLifeStageLabel(){let age;switch(this.getLifeStage()){case PetDefinition.LIFE_STAGE.baby:age="baby";break;case PetDefinition.LIFE_STAGE.child:age="child";break;case PetDefinition.LIFE_STAGE.teen:age="teen";break;case PetDefinition.LIFE_STAGE.elder:age="elder";break;default:age="adult"}return age}prepareSprite(){this.lifeStage=this.getLifeStage(),this.getSpritesheetDefinition()}getNextBirthdayDate(){let m=moment(this.lastBirthday);switch(this.lifeStage){case PetDefinition.LIFE_STAGE.baby:return m.add(App.constants.MANUAL_AGE_HOURS_BABY,"hours");case PetDefinition.LIFE_STAGE.child:return m.add(App.constants.MANUAL_AGE_HOURS_CHILD,"hours");case PetDefinition.LIFE_STAGE.teen:return m.add(App.constants.MANUAL_AGE_HOURS_TEEN,"hours");case PetDefinition.LIFE_STAGE.adult:return m.add(App.constants.MANUAL_AGE_HOURS_ADULT,"hours")}return!1}getNextAutomaticBirthdayDate(){let m=moment(this.birthday);switch(this.lifeStage){case PetDefinition.LIFE_STAGE.baby:return m.add(App.constants.AUTO_AGE_HOURS_BABY,"hours");case PetDefinition.LIFE_STAGE.child:return m.add(App.constants.AUTO_AGE_HOURS_CHILD,"hours");case PetDefinition.LIFE_STAGE.teen:return m.add(App.constants.AUTO_AGE_HOURS_TEEN,"hours");case PetDefinition.LIFE_STAGE.adult:return m.add(App.constants.AUTO_AGE_HOURS_ADULT,"hours")}return!1}ageUp(isNpc){const evolutions=this.getPossibleEvolutions(isNpc);return!!evolutions&&(this.sprite=randomFromArray(evolutions),this.lastBirthday=new Date,this.prepareSprite(),this.friends?.forEach(friendDef=>{friendDef.ageUp&&friendDef.ageUp(!0)}),!0)}getPossibleEvolutions(isNpc,all){const{bounds:bounds,ratings:ratings}=App.constants.SKILL_EVOLUTION_EFFECTIVENESS,careRating=isNpc?random(1,3):this.stats.current_care;let possibleEvolutions=GROWTH_CHART[this.sprite];if(possibleEvolutions||(possibleEvolutions=GROWTH_CHART[randomFromArray(Object.keys(GROWTH_CHART))]),all)return possibleEvolutions;const skills={endurance:this.stats.current_endurance,logic:this.stats.current_logic,expression:this.stats.current_expression},topSkill=Object.entries(skills).reduce((best,[key,value])=>value<=bounds?best:!best||value>best[1]?[key,value]:best,null)?.[0];let finalRating=careRating;if(careRating>1){const topSkillRating=ratings[topSkill];topSkillRating&&(finalRating=topSkillRating)}switch(this.lifeStage){case PetDefinition.LIFE_STAGE.adult:return(!isNpc||App.petDefinition?.getLifeStage()===PetDefinition.LIFE_STAGE.elder)&&[possibleEvolutions[0]];case PetDefinition.LIFE_STAGE.baby:case PetDefinition.LIFE_STAGE.child:case PetDefinition.LIFE_STAGE.teen:switch(finalRating){case 1:return[possibleEvolutions[0]];case 3:return[possibleEvolutions[2]];default:return[possibleEvolutions[1]]}default:return!1}}addFriend(friendDef,friendship){if(-1===this.friends.indexOf(friendDef)){let friendDefS=friendDef.name+friendDef.sprite;return!this.friends.some(activeFriendDef=>activeFriendDef.name+activeFriendDef.sprite==friendDefS)&&(this.friends.push(friendDef),friendDef.increaseFriendship(friendship),!0)}return!1}getCSprite(){let className="";return this.stats.is_ghost&&(className=this.stats.is_ghost===PetDefinition.GHOST_TYPE.angel?"ghost angel":"ghost devil"),PetDefinition.generateCSprite(this.sprite,void 0,className)}getFullCSprite(){return PetDefinition.generateFullCSprite(this.sprite)}getParents(){if(!this.friends.length)return!1;let parents=this.friends.filter(friendDef=>friendDef.stats.is_player_family);return!!parents.length&&parents}refreshWant(currentTry=1,existingCurrentCategory,forced){if(currentTry>48&&!forced)return void console.error("Failed to pick a want:",{existingCurrentCategory:existingCurrentCategory,forced:forced});const{current_want:current_want}=this.stats;current_want.type&&this.clearWant(!1);const possibleCategories=["food","snack","playdate","item","minigame"];App.pet.hasMoodlet("hungry")&&possibleCategories.push("hungry","hungry","hungry");const currentCategory=existingCurrentCategory||randomFromArray(possibleCategories);switch(currentCategory){case"food":const wantedFood=randomFromArray(Object.keys(App.definitions.food)),wantedFoodDef=App.definitions.food[wantedFood];if("age"in wantedFoodDef&&!wantedFoodDef.age.includes(this.lifeStage)||["med","treat"].includes(wantedFoodDef.type))return this.refreshWant(++currentTry,currentCategory);current_want.type=App.constants.WANT_TYPES.food,current_want.item=wantedFood;break;case"snack":const wantedSnack=randomFromArray(Object.keys(App.definitions.food)),wantedSnackDef=App.definitions.food[wantedSnack];if("age"in wantedSnackDef&&!wantedSnackDef.age.includes(this.lifeStage)||!["treat"].includes(wantedSnackDef.type))return this.refreshWant(++currentTry,currentCategory);current_want.type=App.constants.WANT_TYPES.food,current_want.item=wantedSnack;break;case"playdate":if(!this.friends.length)return this.refreshWant(++currentTry);const wantedFriendIndex=random(0,this.friends.length-1);current_want.type=App.constants.WANT_TYPES.playdate,current_want.item=wantedFriendIndex;break;case"item":const appropriateItems=Object.keys(App.definitions.item).map(itemName=>({name:itemName,...App.definitions.item[itemName]})).filter(item=>!item.age||item.age?.includes(App.petDefinition.lifeStage)).map(item=>item.name),wantedItem=randomFromArray(appropriateItems);current_want.type=App.constants.WANT_TYPES.item,current_want.item=wantedItem;break;case"minigame":current_want.type=App.constants.WANT_TYPES.minigame,current_want.item=!0}current_want.appearTime=App.fullTime,current_want.next_refresh_ms=App.fullTime+=6e4*random(20,60)}clearWant(fulfilled){const{current_want:current_want}=this.stats;console.log("want cleared",{fulfilled:fulfilled}),current_want.type=null,current_want.item=null,current_want.appearTime=null,current_want.pendingFulfilled=fulfilled,fulfilled?(this.stats.current_fun+=random(30,50),this.stats.current_discipline+=random(3,6),this.adjustCare(!0),Missions.done(Missions.TYPES.fulfill_want)):random(0,4)||this.adjustCare(!1)}checkWant(condition,type){return!(!condition||type!==this.stats.current_want.type)&&(this.clearWant(!0),!0)}getWantName(){switch(this.stats.current_want.type){case App.constants.WANT_TYPES.item:case App.constants.WANT_TYPES.food:return this.stats.current_want.item;case App.constants.WANT_TYPES.playdate:return this.friends?.at(this.stats.current_want.item)?.name||"Friend";case App.constants.WANT_TYPES.minigame:return"Game Center"}return"Unknown"}adjustCare(add){add?this.stats.current_care+=1:this.stats.current_care-=1,this.stats.current_care=clamp(this.stats.current_care,1,this.stats.max_care)}getCharHash(){const sprite=this.sprite.split("/").at(-1)||this.sprite;return hashCode(sprite)}spritesheetDefinitions={[PetDefinition.LIFE_STAGE.baby]:{cellNumber:1,cellSize:16,rows:4,columns:4,offsetY:8},[PetDefinition.LIFE_STAGE.child]:{cellNumber:1,cellSize:24,rows:4,columns:4,offsetY:4},[PetDefinition.LIFE_STAGE.teen]:{cellNumber:1,cellSize:24,rows:4,columns:4,offsetY:4},[PetDefinition.LIFE_STAGE.adult]:{cellNumber:1,cellSize:32,rows:4,columns:4,offsetY:0},[PetDefinition.LIFE_STAGE.elder]:{cellNumber:1,cellSize:32,rows:4,columns:4,offsetY:0}};static generateCSprite(sprite,noMargin,className){const margin=noMargin?0:10;switch(PetDefinition.getLifeStage(sprite)){case PetDefinition.LIFE_STAGE.baby:return`<c-sprite class="${className}" width="16" height="16" index="0" src="${sprite}" pos-x="0" pos-y="0" style="margin-right: ${margin}px;"></c-sprite>`;case PetDefinition.LIFE_STAGE.child:case PetDefinition.LIFE_STAGE.teen:return`<c-sprite class="${className}" width="16" height="16" index="0" src="${sprite}" pos-x="4" pos-y="4" style="margin-right: ${margin}px;"></c-sprite>`;default:return`<c-sprite class="${className}" width="20" height="20" index="0" src="${sprite}" pos-x="6" pos-y="4" style="margin-right: ${margin}px;"></c-sprite>`}}static generateFullCSprite(sprite){switch(PetDefinition.getLifeStage(sprite)){case PetDefinition.LIFE_STAGE.baby:return`<c-sprite width="16" height="16" index="0" src="${sprite}" pos-x="0" pos-y="0"></c-sprite>`;case PetDefinition.LIFE_STAGE.child:case PetDefinition.LIFE_STAGE.teen:return`<c-sprite width="24" height="24" index="0" src="${sprite}" pos-x="0" pos-y="0"></c-sprite>`;default:return`<c-sprite width="32" height="32" index="0" src="${sprite}" pos-x="0" pos-y="0"></c-sprite>`}}static getLifeStage(sprite){return PET_BABY_CHARACTERS.some(char=>char===sprite)?PetDefinition.LIFE_STAGE.baby:PET_TEEN_CHARACTERS.some(char=>char===sprite)?PetDefinition.LIFE_STAGE.teen:PET_CHILD_CHARACTERS.some(char=>char===sprite)?PetDefinition.LIFE_STAGE.child:PET_ELDER_CHARACTERS.some(char=>char===sprite)?PetDefinition.LIFE_STAGE.elder:PetDefinition.LIFE_STAGE.adult}static getCharCode(sprite){return sprite.replace(/\D+/g,"")}static getOffspringSprite(petA,petB,spritesArray=PET_BABY_CHARACTERS){const seed=petA.getCharHash()+petB.getCharHash();pRandom.save(),pRandom.seed=seed;const sprite=pRandomFromArray(spritesArray)||spritesArray[0];return pRandom.load(),sprite}static LIFE_STAGE={baby:0,child:.5,teen:1,adult:2,elder:3};static GHOST_TYPE={angel:1,devil:2}}